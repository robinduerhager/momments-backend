// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  secret     String    @unique
  avatar     String
  commentIds Int[]
  comments   Comment[]
  // discussions Discussion[]
}

model Discussion {
  id         Int       @id @default(autoincrement())
  posX       Int       @default(0)
  posY       Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  commentIds Int[]
  comments   Comment[]
  readBy     Int[] // User-IDs, die die Diskussion gelesen haben
  // authorId   Int
  // author     User     @relation(fields: [authorId], references: [id])
}

model Comment {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  publishedAt  DateTime? // Wird gesetzt, wenn published auf true gesetzt wird
  published    Boolean         @default(false)
  authorId     Int
  author       User            @relation(fields: [authorId], references: [id])
  discussionId Int
  Discussion   Discussion      @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  modules      CommentModule[] // Ein Kommentar kann mehrere Module haben
}

model CommentModule {
  id          Int                 @id @default(autoincrement())
  commentId   Int
  comment     Comment             @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type        ModuleType
  text        TextModule?
  refsong     RefSongModule?
  audio       AudioMessageModule?
  composition CompositionModule?
}

model TextModule {
  id       Int            @id @default(autoincrement())
  content  String // Text des Kommentars
  module   CommentModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int?           @unique
}

model RefSongModule {
  id       Int            @id @default(autoincrement())
  content  String //Refsong link
  module   CommentModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId Int?           @unique
}

model AudioMessageModule {
  id          Int            @id @default(autoincrement())
  audioFile   AudioFile?     @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  audioFileId Int?           @unique
  module      CommentModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    Int?           @unique
}

model CompositionModule {
  id          Int            @id @default(autoincrement())
  audioTracks AudioTrack[]
  module      CommentModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    Int?           @unique
}

model AudioTrack {
  id                  Int                @id @default(autoincrement())
  audioFile           AudioFile?         @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  audioFileId         Int?               @unique
  startPosition       Float?
  startCue            Float? // Cutting the AudioFile from the Start
  endCue              Float? // Cutting the AudioFile from the End
  composition         CompositionModule? @relation(fields: [compositionModuleId], references: [id], onDelete: Cascade)
  compositionModuleId Int?               
}

model AudioFile {
  id            Int                 @id @default(autoincrement())
  fileName      String
  audioModule   AudioMessageModule?
  audioTrack    AudioTrack?
}

enum ModuleType {
  TEXT
  REFSONG
  AUDIOMESSAGE
  COMPOSITION
}
