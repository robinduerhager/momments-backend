// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String
  secret String @unique
  avatar String
  commentIds Int[]  
  comments Comment[]
  // discussions Discussion[]
}

model Discussion {
  id         Int      @id @default(autoincrement())
  posX       Int      @default(0)
  posY       Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  commentIds Int[]    
  comments   Comment[]
  // authorId   Int
  // author     User     @relation(fields: [authorId], references: [id])
}

model Comment {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  publishedAt  DateTime?      // Wird gesetzt, wenn published auf true gesetzt wird
  published    Boolean        @default(false)
  authorId     Int            
  author       User           @relation(fields: [authorId], references: [id])
  discussionId Int
  Discussion   Discussion     @relation(fields: [discussionId], references: [id])
  modules      CommentModule[] // Ein Kommentar kann mehrere Module haben
}

model CommentModule {
  id        Int         @id @default(autoincrement())
  commentId Int
  comment   Comment        @relation(fields: [commentId], references: [id])
  type      ModuleType
  text      TextModule?
  refsong   RefSongModule?
  // audio     AudioModule?
}

model TextModule {
  id       Int @id @default(autoincrement())
  content  String // Text des Kommentars
  module   CommentModule? @relation(fields: [moduleId], references: [id])
  moduleId Int @unique
}

model RefSongModule {
  id       Int @id @default(autoincrement())
  content  String //Refsong link
  module   CommentModule? @relation(fields: [moduleId], references: [id])
  moduleId Int @unique
}

// model AudioModule {
//   id       Int @id @default(autoincrement())
//   audioUrl String  // URL zur Audiodatei
//   duration Int     // LÃ¤nge der Audiodatei in Sekunden
//   module   CommentModule? @relation(fields: [moduleId], references: [id])
//   moduleId Int @unique
// }

enum ModuleType {
  TEXT
  REFSONG
  // AUDIO
  // COMPOSITION
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }
